@page "/Admin"
@using Blazor.IndexedDB
@inject NavigationManager navManager
@inject ILogger<Admin> Logger
@inject UserService UserService
@inject IIndexedDbFactory DbFactory

<h3>Admin</h3>

<div class="row justify-content-center">
    <div class="col-md-12 col-xl-12 form-layout">
        @* кнопочка закрытия формы *@
        <div class="close-button-section mb-1">
            <button class="btn btn-close" @onclick="ClosePage"></button>
        </div>

        @*----------------------------------------*@
        <div class="col-md-4">

            <div class="mb-3">
                <label for="ipInput" class="form-label">Server IP Address:</label>
                <input type="text" class="form-control" id="ipInput" @bind="IpAddress" placeholder="Enter IP Address" />
            </div>
            <div class="mb-3">
                <label for="portInput" class="form-label">Server Port:</label>
                <input type="number" class="form-control" id="portInput" @bind="Port" placeholder="Enter Port" />
            </div>

            <button type="button" class="btn btn-success btn-sm" @onclick="AddingRecordIndexDB" >AddingRecordIndexDB</button>
            <button type="button" class="btn btn-danger btn-sm" @onclick="RemoveRecord">RemoveRecord</button>
            <button type="button" class="btn btn-info btn-sm" @onclick="ModifyRecord">ModifyRecord</button>
            <button type="button" class="btn btn-dark btn-sm" @onclick="GetAllRecords">GetAllRecords</button>
            <button type="button" class="btn btn-dark btn-sm" @onclick="AddPDF">AddPDF</button>

            <hr />

            <div class="mb-3">
                <label for="commandInput" class="form-label">Command to Send:</label>
                <input type="text" class="form-control" id="commandInput" @bind="Command" placeholder="Enter Command" />
            </div>

            <button class="btn btn-secondary" @onclick="ClearLog">Clear Log</button>

            <hr />

            <div>IndexDB data:</div>
            <textarea class="form-control" rows="12" readonly>@databaseData</textarea>

        </div>
        @*----------------------------------------*@

    </div>
</div>

@code {
    private string IpAddress { get; set; } = "127.0.0.1";
    private int Port { get; set; } = 8887;
    private string Command { get; set; } = string.Empty;
    private string databaseData { get; set; } = string.Empty;
    private bool IsConnected { get; set; } = false;
    private CancellationTokenSource _cancellationTokenSource;

    protected override async Task OnInitializedAsync()
    {
        databaseData = await UserService.GetPcNameAsync();
        base.OnInitialized();
    }

    private void AddPDF()
    {
        string path = "C:\\temp\\test.pdf";
        string readContents;
        using (StreamReader sr = File.OpenText(path))
        {
            readContents = sr.ReadToEnd();
        }


        // using var stream = file.OpenReadStream();
        // using var memoryStream = new MemoryStream();
        // await stream.CopyToAsync(memoryStream);

        // var pdfDocument = new PdfDocument
        //     {
        //         FileName = file.Name,
        //         FileContent = memoryStream.ToArray()
        //     };

        // await PdfDb.PdfDocuments.AddAsync(pdfDocument);
        // await PdfDb.SaveChangesAsync();
    
    }

    private async Task AddingRecordIndexDB()
    {
        using (var db = await this.DbFactory.Create<ExampleDb>())
        {
            db.People.Add(new Person()
                {
                    FirstName = "First",
                    LastName = "Last"
                });
            await db.SaveChanges();
        }
    }

    private async Task RemoveRecord()
    {
        using (var db = await this.DbFactory.Create<ExampleDb>())
        {
            var firstPerson = db.People.First();
            db.People.Remove(firstPerson);
            await db.SaveChanges();
        }
    }


    private async Task ModifyRecord()
    {
        using (var db = await this.DbFactory.Create<ExampleDb>())
        {
            var personWithId1 = db.People.Single(x => x.Id == 5);
            personWithId1.FirstName = "This is 100% a first name";
            await db.SaveChanges();
        }
    }

    private async Task GetAllRecords()
    {
        using (var db = await this.DbFactory.Create<ExampleDb>())
        {
            var personWithId1 = db.People.ToList();

            foreach (var item in personWithId1)
            {
                databaseData = $"{databaseData} {item.FirstName} {item.LastName} {item.Id} \n";
                StateHasChanged();
            }
        }
    }


    private void ClearLog()
    {
        databaseData = string.Empty;
    }

    #region ClosePage()
    private void ClosePage()
    {
        navManager.NavigateTo("/", true);
    }
    #endregion
}
